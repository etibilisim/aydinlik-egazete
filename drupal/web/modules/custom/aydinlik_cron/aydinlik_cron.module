<?php
use Drupal\Core\Messenger;
use Drupal\Core\Url;
use Drupal\user\UserInterface;
use Symfony\Component\HttpFoundation\RedirectResponse;
use Drupal\user\Entity\User;
use Drupal\commerce_cart\CartManagerInterface;
use Drupal\Core\Messenger\MessengerTrait;
use Drupal\Core\StringTranslation\StringTranslationTrait;
use Drupal\commerce_order\Entity\Order;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_cron().
 */
function aydinlik_cron_cron() {
  $users = User::loadMultiple();
  $dateTime = \DateTime::createFromFormat('Y-m-d H:i:s',date('Y-m-d H:i:s'));
  date_default_timezone_set('UTC');
  $date = date("Y-m-d\TH:i:s");
  $today = new \DateTime($date, new \DateTimeZone('UTC'));
  $today_ts = $today->getTimestamp();
/*
 * Checking every user when cronjob is run
 */
  foreach($users as $user) {
    $user_name = $user->field_adiniz->value;
    $user_surname = $user->field_soyadiniz->value;
    $sed = $user->field_abonelik_bitis_tarihi->value;
    $subscription_end_date = new \DateTime;
    $subscription_end_date = new \DateTime($sed, new \DateTimeZone('UTC'));
    $subscription_end_date_ts = $subscription_end_date->getTimestamp();
    if ($subscription_end_date_ts < $today_ts && $subscription_end_date_ts != '') {
      if ($user->hasRole('abone'))  {
        $user->removeRole('abone');
        $user->save();
        $message = $user_name. ' '. $user_surname. ' '.  'adlı kullanıcının abonelik rolü kaldırılmıştır.';
        \Drupal::logger('aydinlik_cron')->warning($message);
      }
    }
    if ($user->field_abonelik_referans_kodu->value != NULL){
      $src = $user->field_abonelik_referans_kodu->value;
      if ($subscription_end_date_ts != NULL && $subscription_end_date_ts <= $today_ts ) {
        $request = new \Iyzipay\Request\Subscription\SubscriptionDetailsRequest();
        $request->setSubscriptionReferenceCode($src);
        $result = \Iyzipay\Model\Subscription\SubscriptionDetails::retrieve($request,Drupal\iyzipay\Config::options());
        $orders = $result->getOrders();
        if ($orders != NULL) {
          $last_order = $orders[0];
          $last_payments = $last_order->paymentAttempts;
          if ($last_payments != NULL) {
            $last_payment = end($last_payments)->paymentStatus;
          }
          else {
            $last_payment = 'FAILURE';
          }
        }
        else {
          $last_payment = 'FAILURE';
        }
        $ppn = $result->getPricingPlanName(); //$ppn is pricing plan name
        //$order_created = date('Y-m-d H:i:s',substr($result->getCreatedDate(),0,10));
        if ($last_payment == 'SUCCESS') {
          $user->field_abonelik_durumu->value = 'Aktif';
          if (str_contains ($ppn, 'Aylık')) {
            $subscription_end_date = date('Y-m-d\TH:i:s', strtotime('1 month',strtotime(date("Y-m-d\TH:i:s",$today_ts))));
            $last_subscription_update_date = date("Y-m-d\TH:i:s",$today_ts);
            $user->field_abonelik_bitis_tarihi->value = $subscription_end_date;
            $user->field_son_abonelik_islem_tarihi->value = $last_subscription_update_date;
            $user->addRole('abone');
            $user->save();
            $message = $user_name. ' '. $user_surname. ' '.  'Aylık abonelik başarılı bir şekilde uzatılmıştır.';
            \Drupal::logger('aydinlik_cron')->notice($message);
          }
          if (str_contains ($ppn, 'Yıllık')) {
            $subscription_end_date = date('Y-m-d\TH:i:s', strtotime('1 year',strtotime(date("Y-m-d\TH:i:s",$today_ts))));
            $last_subscription_update_date = date("Y-m-d\TH:i:s",$today_ts);
            $user->field_abonelik_bitis_tarihi->value = $subscription_end_date;
            $user->field_son_abonelik_islem_tarihi->value = $last_subscription_update_date;
            $user->addRole('abone');
            $user->save();
            $message = $user_name. ' '. $user_surname. ' '. 'Yıllık abonelik başarılı bir şekilde uzatılmıştır.';
            \Drupal::logger('aydinlik_cron')->notice($message);
          }
        }
        else {
          $user->field_abonelik_durumu->value = 'Yenileme bekliyor';
          $user->removeRole('abone');
          $user->save();
          $message = $user_name. ' '. $user_surname. ' '. 'Aboneliğin uzatılması sırasında bir hata oluştu. Lütfen abone ile iletişime geçiniz.';
          \Drupal::logger('aydinlik_cron')->error($message);
        }
      }
    }
  }
}
